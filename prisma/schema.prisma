// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  image         String?
  role          String    @default("USER") // Changed from enum to string
  recipes       Recipe[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Category model for recipe organization
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  recipes     Recipe[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Main Recipe model
model Recipe {
  id            String          @id @default(cuid())
  title         String
  slug          String          @unique
  description   String?
  language      String          @default("en")
  cookTime      Int
  prepTime      Int
  servings      Int
  difficulty    String          @default("EASY")
  categoryId    String
  userId        String
  category      Category        @relation(fields: [categoryId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
  sections      RecipeSection[]
  images        RecipeImage[]
  comments      Comment[]
  tips          RecipeTip[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Recipe Section model for nested ingredients and instructions
model RecipeSection {
  id        String       @id @default(cuid())
  title     String
  type      String      // "INGREDIENTS" | "INSTRUCTIONS" | "TIPS"
  recipeId  String
  recipe    Recipe      @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  items     RecipeItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// Recipe Item model for individual ingredients or instruction steps
model RecipeItem {
  id            String        @id @default(cuid())
  content       String
  sectionId     String
  section       RecipeSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Comment model for recipe discussions
model Comment {
  id        String   @id @default(cuid())
  content   String
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New RecipeTip model
model RecipeTip {
  id        String   @id @default(cuid())
  content   String
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Recipe Image model for multiple recipe images
model RecipeImage {
  id           String   @id @default(cuid())
  url          String
  thumbnailUrl String
  mediumUrl    String
  alt          String?
  description  String?
  isPrimary    Boolean  @default(false)
  recipeId     String
  recipe       Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}