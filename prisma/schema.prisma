generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum RecipeStatus {
  DRAFT
  PUBLISHED
  HIDDEN
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum ReviewStatus {
  DRAFT
  PUBLISHED
  HIDDEN
}

enum Role {
  ADMIN
  USER
  EDITOR
}

enum RecipeSectionType {
  INGREDIENTS
  INSTRUCTIONS
}

enum ServingType {
  PEOPLE
  SLICES
  PIECES
  PORTIONS
  BOWLS
  GLASSES
}

model DraftRecipe {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Now each field is optional with `?`
  title            String?
  description      String?
  shortDescription String?

  prepTime  Int?
  cookTime  Int?
  totalTime Int?

  difficulty  RecipeDifficulty?
  servings    Int?
  servingType ServingType?

  tags     String[] @default([]) // If you want to allow null for tags 
  tips     Json?
  sections Json?

  openaiTokensUsed Int?
  openaiModel      String?
  openaiCost       Decimal?

  // For debugging
  rawOpenAIResponse String?
  promptUsed        String?
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String      @unique
  emailVerified   DateTime?
  username        String?     @unique
  password        String?
  image           String?
  role            Role        @default(USER)
  status          UserStatus?
  youtubeHandle   String?
  instagramHandle String?
  facebookHandle  String?
  tiktokHandle    String?
  blogUrl         String?
  recipeCount     Int         @default(0)

  // NEW FIELDS: Notification preferences
  subscribeNewsletter    Boolean @default(true)
  subscribeCommentReply  Boolean @default(true)
  subscribeRecipeComment Boolean @default(true)

  // Relations
  recipes       Recipe[]
  subscriptions Subscription[]
  comments      Comment[]
  guides        Guide[]
  guideComments GuideComment[]
  reviews       Review[]
  savedRecipes  SavedRecipe[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  UserLikes     UserLikes[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  recipes     Recipe[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // New field for storing the number of associated recipes directly
  recipesCount Int @default(0)
}

model Recipe {
  id                  String            @id @default(cuid())
  title               String
  slug                String            @unique
  description         String?
  shortDescription    String?
  membersOnly         Boolean           @default(false)
  language            String            @default("en")
  cookTime            Int?
  prepTime            Int?
  totalTime           Int?
  servings            Int?
  servingType         ServingType?
  difficulty          RecipeDifficulty  @default(EASY)
  status              RecipeStatus      @default(DRAFT)
  categoryId          String?
  userId              String
  category            Category?         @relation(fields: [categoryId], references: [id])
  user                User              @relation(fields: [userId], references: [id])
  sections            RecipeSection[]
  images              RecipeImage[]
  comments            Comment[]
  tips                RecipeTip[]
  tags                Tag[]             @relation("RecipesOnTags")
  isEditorsPick       Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime
  publishedAt         DateTime?
  reviews             Review[]
  avgRating           Float?
  numReviews          Int               @default(0)
  savedBy             SavedRecipe[]
  // ↓↓↓ NEW columns for OpenAI suggestions ↓↓↓
  openaiPrepTime      Int?
  openaiPrepTimeText  String?
  openaiCookTime      Int?
  openaiCookTimeText  String?
  openaiTotalTime     Int?
  openaiTotalTimeText String?
  openaiServings      Int?
  openaiDifficulty    RecipeDifficulty?
  openaiTags          Json? // or String[] if you prefer an array column
  openaiServingType   ServingType?

  // New fields for metrics
  viewCount Int         @default(0)
  likeCount Int         @default(0)
  UserLikes UserLikes[]

  // New fields to store full raw data:
  rawOpenAIResponse String? // store entire JSON/string
  promptUsed        String? // store final prompt for auditing

  @@index([categoryId])
  @@index([userId])
  @@index([status])
  @@index([isEditorsPick])
}

model RecipeSection {
  id        String            @id @default(cuid())
  title     String
  type      RecipeSectionType
  recipeId  String
  recipe    Recipe            @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  items     RecipeItem[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model RecipeItem {
  id        String        @id @default(cuid())
  content   String
  sectionId String
  section   RecipeSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Comment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  content   String
  status    CommentStatus @default(PENDING)
  userId    String
  recipeId  String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@index([userId])
  @@index([recipeId])
  @@index([parentId])
}

model RecipeTip {
  id        String   @id @default(cuid())
  content   String
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecipeImage {
  id           String   @id @default(cuid())
  url          String
  thumbnailUrl String
  mediumUrl    String
  alt          String?
  description  String?
  isPrimary    Boolean  @default(false)
  recipeId     String
  recipe       Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Guide {
  id        String         @id @default(cuid())
  title     String
  slug      String         @unique
  content   String?
  tags      Tag[]          @relation("GuidesOnTags")
  authorId  String?
  author    User?          @relation(fields: [authorId], references: [id])
  sections  GuideSection[]
  images    GuideImage[]
  comments  GuideComment[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model GuideSection {
  id        String   @id @default(cuid())
  title     String
  content   String
  guideId   String
  guide     Guide    @relation(fields: [guideId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuideImage {
  id          String   @id @default(cuid())
  url         String
  alt         String?
  description String?
  isPrimary   Boolean  @default(false)
  guideId     String
  guide       Guide    @relation(fields: [guideId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GuideComment {
  id        String   @id @default(cuid())
  content   String
  guideId   String
  guide     Guide    @relation(fields: [guideId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id           String   @id @default(cuid())
  name         String   @unique
  slug         String   @unique
  description  String?
  image        String?
  guides       Guide[]  @relation("GuidesOnTags")
  recipes      Recipe[] @relation("RecipesOnTags")
  recipesCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Subscriber {
  id                String    @id @default(cuid())
  email             String    @unique
  isVerified        Boolean   @default(false)
  verificationToken String?   @unique
  verifiedAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Review {
  id         String       @id @default(cuid())
  rating     Int
  reviewText String?
  userId     String
  recipeId   String
  status     ReviewStatus @default(PUBLISHED)
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model SavedRecipe {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, recipeId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                   String                @id @default(cuid())
  userId               String
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                 SubscriptionPlan
  status               SubscriptionStatus    @default(ACTIVE)
  startDate            DateTime              @default(now())
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean               @default(false)
  canceledAt           DateTime?
  stripeSubscriptionId String?
  interval             SubscriptionInterval?
  trialEnd             DateTime?
  metadata             Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserLikes {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  // If you also want soft-deletion or toggling, you can add an 'active' boolean
  active Boolean @default(true)

  // relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}

enum SubscriptionPlan {
  BASIC
  STANDARD
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  INCOMPLETE
  EXPIRED
}

enum SubscriptionInterval {
  MONTHLY
  YEARLY
}
