// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // or another provider
  url      = env("DATABASE_URL")
}

// Existing models
model User {
  id         String         @id @default(cuid())
  name       String?
  email      String         @unique
  password   String?
  image      String?
  role       String         @default("USER")
  status     String         @default("ACTIVE")
  recipes    Recipe[]
  comments   Comment[]
  guides     Guide[]
  gComments  GuideComment[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  reviews    Review[]
  savedRecipes SavedRecipe[]
}

// Category model for recipe organization
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  recipes     Recipe[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Recipe model with tag relation
model Recipe {
  id            String          @id @default(cuid())
  title         String
  slug          String          @unique
  description   String?
  language      String          @default("en")
  cookTime      Int
  prepTime      Int
  servings      Int
  difficulty    String          @default("EASY")
  categoryId    String
  userId        String
  category      Category        @relation(fields: [categoryId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
  sections      RecipeSection[]
  images        RecipeImage[]
  comments      Comment[]
  tips          RecipeTip[]
  tags          Tag[]           @relation("RecipesOnTags") // many-to-many with Tag
  isEditorsPick Boolean  @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  reviews       Review[]
  avgRating     Float?
  numReviews    Int       @default(0)
  savedBy       SavedRecipe[]
}

model RecipeSection {
  id        String        @id @default(cuid())
  title     String
  type      String         // "INGREDIENTS" | "INSTRUCTIONS" | "TIPS"
  recipeId  String
  recipe    Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  items     RecipeItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model RecipeItem {
  id            String        @id @default(cuid())
  content       String
  sectionId     String
  section       RecipeSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   // Remove @db.Text since SQLite doesn't support it
  status    String   @default("PENDING")
  userId    String
  recipeId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipeId])
}

model RecipeTip {
  id        String   @id @default(cuid())
  content   String
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecipeImage {
  id           String   @id @default(cuid())
  url          String
  thumbnailUrl String
  mediumUrl    String
  alt          String?
  description  String?
  isPrimary    Boolean  @default(false)
  recipeId     String
  recipe       Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Guide Models
model Guide {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  content     String?
  tags        Tag[]          @relation("GuidesOnTags") // many-to-many with Tag
  authorId    String?
  author      User?          @relation(fields: [authorId], references: [id])
  sections    GuideSection[]
  images      GuideImage[]
  comments    GuideComment[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model GuideSection {
  id        String      @id @default(cuid())
  title     String
  content   String
  guideId   String
  guide     Guide       @relation(fields: [guideId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model GuideImage {
  id           String   @id @default(cuid())
  url          String
  alt          String?
  description  String?
  isPrimary    Boolean  @default(false)
  guideId      String
  guide        Guide    @relation(fields: [guideId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model GuideComment {
  id        String   @id @default(cuid())
  content   String
  guideId   String
  guide     Guide    @relation(fields: [guideId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tag model for categorizing recipes and guides
model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  guides    Guide[]   @relation("GuidesOnTags")
  recipes   Recipe[]  @relation("RecipesOnTags")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Subscriber {
  id                String    @id @default(cuid())
  email             String    @unique
  isVerified        Boolean   @default(false)
  verificationToken String?
  verifiedAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Review {
  id          String    @id @default(cuid())
  rating      Int
  reviewText  String?
  userId      String
  recipeId    String
  status      String    @default("PUBLISHED")
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  // Constraints
  @@index([userId])
  @@index([recipeId])
  @@unique([userId, recipeId])
}

model SavedRecipe {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  notes     String?   // New field for user notes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, recipeId])
}